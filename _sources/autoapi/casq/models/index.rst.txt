:py:mod:`casq.models`
=====================

.. py:module:: casq.models

.. autoapi-nested-parse::

   Collecting casq.models package imports in one place for convenient access.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   control_model/index.rst
   hamiltonian_model/index.rst
   transmon_model/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   casq.models.ControlModel
   casq.models.HamiltonianModel
   casq.models.TransmonModel




.. py:class:: ControlModel(dt: float, channel_carrier_freqs: dict, control_channel_map: Optional[dict] = None)


   ControlModel class.

   Args:
           dt: Sampling interval.
           channel_carrier_freqs: Dictionary mapping channel names to frequencies.
           control_channel_map: A dictionary mapping control channel labels to indices.


.. py:class:: HamiltonianModel(hamiltonian_dict: dict, extracted_qubits: Optional[list[int]] = None, rotating_frame: Optional[qiskit_dynamics.array.Array] = None, in_frame_basis: bool = False, evaluation_mode: EvaluationMode = EvaluationMode.DENSE, rwa_cutoff_freq: Optional[float] = None, rwa_carrier_freqs: Optional[Union[numpy.typing.NDArray, tuple[numpy.typing.NDArray, numpy.typing.NDArray]]] = None)


   HamiltonianModel class.

   Args:
       hamiltonian_dict: Dictionary representing Hamiltonian in string specification.
       extracted_qubits: List of qubits to extract from the Hamiltonian.
       rotating_frame: Rotating frame operator.
                       If specified with a 1d array, it is interpreted as the
                       diagonal of a diagonal matrix. Assumed to store
                       the anti-hermitian matrix F = -iH.
       in_frame_basis: Whether to represent the model in the basis in which
                       the rotating frame operator is diagonalized.
       evaluation_mode: Evaluation mode to use.
       rwa_cutoff_freq: Rotating wave approximation cutoff frequency.
                       If None, no approximation is made.
       rwa_carrier_freqs: Carrier frequencies to use for rotating wave approximation.

   .. py:class:: EvaluationMode(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Evaluation mode.

      .. py:attribute:: DENSE
         :value: 0

         

      .. py:attribute:: SPARSE
         :value: 1

         



.. py:class:: TransmonModel(qubit_map: dict[int, TransmonProperties], coupling_map: dict[tuple[int, int], float], extracted_qubits: Optional[list[int]] = None, rotating_frame: Optional[numpy.typing.NDArray] = None, in_frame_basis: bool = False, evaluation_mode: casq.models.hamiltonian_model.HamiltonianModel.EvaluationMode = HamiltonianModel.EvaluationMode.DENSE, rwa_cutoff_freq: Optional[float] = None, rwa_carrier_freqs: Optional[Union[numpy.typing.NDArray, tuple[numpy.typing.NDArray, numpy.typing.NDArray]]] = None)


   Bases: :py:obj:`casq.models.hamiltonian_model.HamiltonianModel`

   TransmonModel class.

   Args:
       qubit_map: Dictionary mapping qubit indices to properties.
       coupling_map: Dictionary mapping qubit couplings to coupling strength.
       extracted_qubits: List of qubits to extract from the Hamiltonian.
       rotating_frame: Rotating frame operator.
                       If specified with a 1d array, it is interpreted as the
                       diagonal of a diagonal matrix. Assumed to store
                       the anti-hermitian matrix F = -iH.
       in_frame_basis: Whether to represent the model in the basis in which
                       the rotating frame operator is diagonalized.
       evaluation_mode: Evaluation mode to use.
       rwa_cutoff_freq: Rotating wave approximation cutoff frequency.
                       If None, no approximation is made.
       rwa_carrier_freqs: Carrier frequencies to use for rotating wave approximation.

   .. py:class:: TransmonProperties


      Transmon qubit properties.

      .. py:attribute:: frequency
         :type: float

         

      .. py:attribute:: anharmonicity
         :type: float

         

      .. py:attribute:: drive
         :type: float

         


   .. py:attribute:: MANILA

      


