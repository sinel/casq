:py:mod:`casq.optimizers.pulse_optimizer`
=========================================

.. py:module:: casq.optimizers.pulse_optimizer

.. autoapi-nested-parse::

   Pulse optimizer.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   casq.optimizers.pulse_optimizer.PulseOptimizer




.. py:class:: PulseOptimizer(pulse_gate: casq.gates.PulseGate, pulse_backend: casq.backends.pulse_backend.PulseBackend, method: casq.backends.pulse_backend.PulseBackend.ODESolverMethod, target_measurement: Union[dict[str, float], qiskit.quantum_info.DensityMatrix, qiskit.quantum_info.Statevector], method_options: Optional[dict[str, Any]] = None, fidelity_type: Optional[FidelityType] = None, target_qubit: Optional[int] = None, use_jit: bool = False)


   PulseOptimizer class.

   Args:
       pulse_gate: Pulse gate.
       pulse_backend: Pulse backend.
       method: ODE solver method.
       target_measurement: Target measurement against which fidelity will be calculated.
       method_options: Options specific to method.
       fidelity_type: Fidelity type. Defaults to FidelityType.COUNTS.
       target_qubit: Qubit to drive with pulse. Defaults to first qubit in simulator.
       use_jit: If True, then jit and value_and_grad is applied to objective function.

   .. py:class:: PulseType(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Pulse type.

      .. py:attribute:: DRAG
         :value: 0

         

      .. py:attribute:: GAUSSIAN
         :value: 1

         

      .. py:attribute:: GAUSSIAN_SQUARE
         :value: 2

         


   .. py:class:: FidelityType(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Fidelity type.

      .. py:attribute:: COUNTS
         :value: 0

         


   .. py:class:: OptimizationMethod


      Bases: :py:obj:`str`, :py:obj:`enum.Enum`

      Optimization methods.

      .. py:attribute:: SCIPY_BFGS
         :value: 'BFGS'

         

      .. py:attribute:: SCIPY_CG
         :value: 'CG'

         

      .. py:attribute:: SCIPY_COBYLA
         :value: 'COBYLA'

         

      .. py:attribute:: SCIPY_DOGLEG
         :value: 'dogleg'

         

      .. py:attribute:: SCIPY_L_BFGS_B
         :value: 'L-BFGS-B'

         

      .. py:attribute:: SCIPY_NEWTON_CG
         :value: 'Newton-CG'

         

      .. py:attribute:: SCIPY_NELDER_MEAD
         :value: 'Nelder-Mead'

         

      .. py:attribute:: SCIPY_POWELL
         :value: 'Powell'

         

      .. py:attribute:: SCIPY_SLSQP
         :value: 'SLSQP'

         

      .. py:attribute:: SCIPY_TNC
         :value: 'TNC'

         

      .. py:attribute:: SCIPY_TRUST_CONSTR
         :value: 'trust-constr'

         

      .. py:attribute:: SCIPY_TRUST_EXACT
         :value: 'trust-exact'

         

      .. py:attribute:: SCIPY_TRUST_KRYLOV
         :value: 'trust-krylov'

         

      .. py:attribute:: SCIPY_TRUST_NCG
         :value: 'trust-ncg'

         


   .. py:class:: FiniteDifferenceScheme


      Bases: :py:obj:`str`, :py:obj:`enum.Enum`

      Finite difference scheme.

      .. py:attribute:: CS
         :value: 'cs'

         

      .. py:attribute:: TWO_POINT
         :value: '2-point'

         

      .. py:attribute:: THREE_POINT
         :value: '3-point'

         


   .. py:class:: Solution


      Pulse optimizer solution.

      Args:
          initial_parameters: Initial parameters.
          initial_pulse: Initial pulse.
          num_iterations: Number of iterations.
          iterations: Iteration data.
          parameters: Optimum parameters.
          measurement: Optimum measurement.
          fidelity: Optimum fidelity.
          pulse: Optimum pulse.
          gate: Optimum gate.
          circuit: Optimum circuit.
          message: Solution message.

      .. py:attribute:: initial_parameters
         :type: dict[str, Any]

         

      .. py:attribute:: initial_pulse
         :type: qiskit.pulse.ScalableSymbolicPulse

         

      .. py:attribute:: num_iterations
         :type: int

         

      .. py:attribute:: iterations
         :type: list[PulseOptimizer]

         

      .. py:attribute:: parameters
         :type: dict[str, Any]

         

      .. py:attribute:: measurement
         :type: Union[dict[str, float], qiskit.quantum_info.DensityMatrix, qiskit.quantum_info.Statevector]

         

      .. py:attribute:: fidelity
         :type: float

         

      .. py:attribute:: pulse
         :type: qiskit.pulse.ScalableSymbolicPulse

         

      .. py:attribute:: gate
         :type: casq.gates.PulseGate

         

      .. py:attribute:: circuit
         :type: casq.gates.PulseCircuit

         

      .. py:attribute:: message
         :type: str

         

      .. py:method:: plot_objective_history(filename: Optional[str] = None, hidden: bool = False) -> matplotlib.axes.Axes

         PulseOptimizer.Solution.plot_objective_history method.

         Plots iteration history of objective.

         Args:
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.

         Returns:
             :py:class:`matplotlib.axes.Axes`


      .. py:method:: plot_parameter_history(parameters: Optional[list[str]] = None, filename: Optional[str] = None, hidden: bool = False) -> matplotlib.axes.Axes

         PulseOptimizer.Solution.plot_parameter_history method.

         Plots iteration history of parameters.

         Args:
             parameters: Parameters to plot.
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.

         Returns:
             :py:class:`matplotlib.axes.Axes`


      .. py:method:: plot_objective_by_parameter(parameters: list[str], filename: Optional[str] = None, hidden: bool = False) -> matplotlib.axes.Axes

         PulseOptimizer.Solution.plot_trajectory method.

         Plots iteration history of parameters.

         Args:
             parameters: Parameters to plot.
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.

         Returns:
             :py:class:`matplotlib.axes.Axes`



   .. py:class:: Iteration


      Pulse optimizer iteration.

      .. py:attribute:: index
         :type: int

         

      .. py:attribute:: parameters
         :type: dict[str, Any]

         

      .. py:attribute:: result
         :type: Any

         

      .. py:attribute:: objective
         :type: float

         


   .. py:method:: solve(initial_params: numpy.typing.NDArray, method: OptimizationMethod, jac: Optional[Union[bool, FiniteDifferenceScheme, Callable]] = None, hess: Optional[Union[FiniteDifferenceScheme, scipy.optimize.HessianUpdateStrategy, Callable]] = None, hessp: Optional[Callable] = None, bounds: Optional[Union[list, scipy.optimize.Bounds]] = None, constraints: Optional[Union[dict, list[dict], scipy.optimize.LinearConstraint, list[scipy.optimize.LinearConstraint], scipy.optimize.NonlinearConstraint, list[scipy.optimize.NonlinearConstraint]]] = None, tol: Optional[float] = None, maxiter: Optional[int] = None, verbose: bool = True) -> PulseOptimizer

      PulseOptimizer.optimize method.

      Optimize pulse.
      This is basically a wrapper around scipy.optimize.minimize.
      For more details, see
      https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html

      Args:
          initial_params: Pulse parameters.
          method: Optimization method.
          jac: Method for computing the gradient vector.
              Only for CG, BFGS, Newton-CG, L-BFGS-B, TNC, SLSQP,
              dogleg, trust-ncg, trust-krylov, trust-exact and trust-constr.
          hess: Method for computing the Hessian matrix.
              Only for Newton-CG, dogleg, trust-ncg, trust-krylov,
              trust-exact and trust-constr.
          hessp: Hessian of objective function times an arbitrary vector p.
              Only for Newton-CG, trust-ncg, trust-krylov, trust-constr.
              Only one of hessp or hess needs to be given.
              If hess is provided, then hessp will be ignored.
          bounds: Bounds on variables for Nelder-Mead, L-BFGS-B, TNC,
              SLSQP, Powell, trust-constr, and COBYLA methods.
          constraints: Constraints definition.
              Only for COBYLA, SLSQP and trust-constr.
          tol: Tolerance for termination.
          maxiter: Maximum number of iterations to perform.
          verbose: If True, print convergence messages.

      Returns:
          :py:class:`casq.PulseOptimizer.Solution`


   .. py:method:: _build_objective_function() -> Callable[[numpy.typing.NDArray], Union[float, tuple[float, float]]]

      PulseOptimizer._build_objective_function method.

      Build objective function to minimize.

      Returns:
          Objective function.


   .. py:method:: _objective_callback(parameters: dict[str, Any], result: Any, objective: float) -> None

      PulseOptimizer._objective_callback method.

      Callback used by objective function.


   .. py:method:: _build_circuit(parameters: dict[str, Any]) -> casq.gates.PulseCircuit
      :abstractmethod:

      PulseOptimizer._build_circuit method.

      Build pulse circuit for objective function.

      Returns:
          :py:class:`casq.gates.PulseCircuit`



