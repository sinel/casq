:py:mod:`casq.optimizers`
=========================

.. py:module:: casq.optimizers

.. autoapi-nested-parse::

   Collecting casq.optimizers package imports in one place for convenient access.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   single_qubit_gates/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   pulse_optimizer/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   casq.optimizers.PulseOptimizer
   casq.optimizers.SingleQubitGateOptimizer
   casq.optimizers.XGateOptimizer




.. py:class:: PulseOptimizer(pulse_gate, pulse_backend, method, target_measurement, method_options = None, fidelity_type = None, target_qubit = None, use_jit = False)


   PulseOptimizer class.

   .. py:class:: PulseType(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Pulse type.

      .. py:attribute:: DRAG
         :value: 0

         

      .. py:attribute:: GAUSSIAN
         :value: 1

         

      .. py:attribute:: GAUSSIAN_SQUARE
         :value: 2

         


   .. py:class:: FidelityType(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Fidelity type.

      .. py:attribute:: COUNTS
         :value: 0

         


   .. py:class:: OptimizationMethod


      Bases: :py:obj:`str`, :py:obj:`enum.Enum`

      Optimization methods.

      .. py:attribute:: SCIPY_BFGS
         :value: 'BFGS'

         

      .. py:attribute:: SCIPY_CG
         :value: 'CG'

         

      .. py:attribute:: SCIPY_COBYLA
         :value: 'COBYLA'

         

      .. py:attribute:: SCIPY_DOGLEG
         :value: 'dogleg'

         

      .. py:attribute:: SCIPY_L_BFGS_B
         :value: 'L-BFGS-B'

         

      .. py:attribute:: SCIPY_NEWTON_CG
         :value: 'Newton-CG'

         

      .. py:attribute:: SCIPY_NELDER_MEAD
         :value: 'Nelder-Mead'

         

      .. py:attribute:: SCIPY_POWELL
         :value: 'Powell'

         

      .. py:attribute:: SCIPY_SLSQP
         :value: 'SLSQP'

         

      .. py:attribute:: SCIPY_TNC
         :value: 'TNC'

         

      .. py:attribute:: SCIPY_TRUST_CONSTR
         :value: 'trust-constr'

         

      .. py:attribute:: SCIPY_TRUST_EXACT
         :value: 'trust-exact'

         

      .. py:attribute:: SCIPY_TRUST_KRYLOV
         :value: 'trust-krylov'

         

      .. py:attribute:: SCIPY_TRUST_NCG
         :value: 'trust-ncg'

         


   .. py:class:: FiniteDifferenceScheme


      Bases: :py:obj:`str`, :py:obj:`enum.Enum`

      Finite difference scheme.

      .. py:attribute:: CS
         :value: 'cs'

         

      .. py:attribute:: TWO_POINT
         :value: '2-point'

         

      .. py:attribute:: THREE_POINT
         :value: '3-point'

         


   .. py:class:: Solution


      Pulse optimizer solution.

      .. py:attribute:: initial_parameters
         :type: dict[str, Any]

         

      .. py:attribute:: initial_pulse
         :type: qiskit.pulse.ScalableSymbolicPulse

         

      .. py:attribute:: num_iterations
         :type: int

         

      .. py:attribute:: iterations
         :type: list[PulseOptimizer]

         

      .. py:attribute:: parameters
         :type: dict[str, Any]

         

      .. py:attribute:: measurement
         :type: Union[dict[str, float], qiskit.quantum_info.DensityMatrix, qiskit.quantum_info.Statevector]

         

      .. py:attribute:: fidelity
         :type: float

         

      .. py:attribute:: pulse
         :type: qiskit.pulse.ScalableSymbolicPulse

         

      .. py:attribute:: gate
         :type: casq.gates.PulseGate

         

      .. py:attribute:: circuit
         :type: casq.gates.PulseCircuit

         

      .. py:attribute:: message
         :type: str

         

      .. py:method:: plot_objective_history(filename = None, hidden = False)

         PulseOptimizer.Solution.plot_objective_history method.

         Plots iteration history of objective.

         Args:
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.

         Returns:
             Matplotlib Axes.


      .. py:method:: plot_parameter_history(parameters = None, filename = None, hidden = False)

         PulseOptimizer.Solution.plot_parameter_history method.

         Plots iteration history of parameters.

         Args:
             parameters: Parameters to plot.
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.

         Returns:
             Matplotlib Axes.


      .. py:method:: plot_objective_by_parameter(parameters, filename = None, hidden = False)

         PulseOptimizer.Solution.plot_trajectory method.

         Plots iteration history of parameters.

         Args:
             parameters: Parameters to plot.
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.

         Returns:
             Matplotlib Axes.



   .. py:class:: Iteration


      Pulse optimizer iteration.

      .. py:attribute:: index
         :type: int

         

      .. py:attribute:: parameters
         :type: dict[str, Any]

         

      .. py:attribute:: result
         :type: Any

         

      .. py:attribute:: objective
         :type: float

         


   .. py:method:: solve(initial_params, method, jac = None, hess = None, hessp = None, bounds = None, constraints = None, tol = None, maxiter = None, verbose = True)

      PulseOptimizer.optimize method.

      Optimize pulse.
      This is basically a wrapper around scipy.optimize.minimize.
      For more details, see
      https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html

      Args:
          initial_params: Pulse parameters.
          method: Optimization method.
          jac: Method for computing the gradient vector.
              Only for CG, BFGS, Newton-CG, L-BFGS-B, TNC, SLSQP,
              dogleg, trust-ncg, trust-krylov, trust-exact and trust-constr.
          hess: Method for computing the Hessian matrix.
              Only for Newton-CG, dogleg, trust-ncg, trust-krylov,
              trust-exact and trust-constr.
          hessp: Hessian of objective function times an arbitrary vector p.
              Only for Newton-CG, trust-ncg, trust-krylov, trust-constr.
              Only one of hessp or hess needs to be given.
              If hess is provided, then hessp will be ignored.
          bounds: Bounds on variables for Nelder-Mead, L-BFGS-B, TNC,
              SLSQP, Powell, trust-constr, and COBYLA methods.
          constraints: Constraints definition.
              Only for COBYLA, SLSQP and trust-constr.
          tol: Tolerance for termination.
          maxiter: Maximum number of iterations to perform.
          verbose: If True, print convergence messages.

      Returns:
          :py:class:`casq.PulseOptimizer.Solution`


   .. py:method:: _build_objective_function()

      PulseOptimizer._build_objective_function method.

      Build objective function to minimize.

      Returns:
          Objective function.


   .. py:method:: _objective_callback(parameters, result, objective)

      PulseOptimizer._objective_callback method.

      Callback used by objective function.


   .. py:method:: _build_circuit(parameters)
      :abstractmethod:

      PulseOptimizer._build_circuit method.

      Build pulse circuit for objective function.

      Returns:
          PulseCircuit.



.. py:class:: SingleQubitGateOptimizer(pulse_gate, pulse_backend, method, target_measurement, method_options = None, fidelity_type = None, use_jit = False)


   Bases: :py:obj:`casq.optimizers.pulse_optimizer.PulseOptimizer`

   SingleQubitGateOptimizer class.

   .. py:method:: _build_circuit(parameters)

      SingleGateOptimizer._build_circuit method.

      Build pulse circuit for objective function.

      Returns:
          PulseCircuit.



.. py:class:: XGateOptimizer(pulse_gate, pulse_backend, method, method_options = None, fidelity_type = None, use_jit = False)


   Bases: :py:obj:`casq.optimizers.single_qubit_gates.single_qubit_gate_optimizer.SingleQubitGateOptimizer`

   XGateOptimizer class.


