:py:mod:`casq.backends.pulse_backend`
=====================================

.. py:module:: casq.backends.pulse_backend

.. autoapi-nested-parse::

   Pulse simulator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   casq.backends.pulse_backend.PulseBackend




.. py:class:: PulseBackend(hamiltonian, control, seed = None)


   PulseBackend class.

   .. py:class:: ODESolverMethod


      Bases: :py:obj:`str`, :py:obj:`enum.Enum`

      Solver methods.

      .. py:attribute:: QISKIT_DYNAMICS_RK4
         :value: 'RK4'

         

      .. py:attribute:: QISKIT_DYNAMICS_JAX_RK4
         :value: 'jax_RK4'

         

      .. py:attribute:: QISKIT_DYNAMICS_JAX_ODEINT
         :value: 'jax_odeint'

         

      .. py:attribute:: SCIPY_BDF
         :value: 'BDF'

         

      .. py:attribute:: SCIPY_DOP853
         :value: 'DOP853'

         

      .. py:attribute:: SCIPY_LSODA
         :value: 'LSODA'

         

      .. py:attribute:: SCIPY_RADAU
         :value: 'Radau'

         

      .. py:attribute:: SCIPY_RK23
         :value: 'RK23'

         

      .. py:attribute:: SCIPY_RK45
         :value: 'RK45'

         


   .. py:class:: PulseSolution(circuit_name, qubits, times, samples, counts, populations, states, iq_data, avg_iq_data, shots = 1024, seed = None, is_success = True, timestamp = datetime.timestamp(datetime.now()))


      PulseSolution class.

      .. py:method:: plot_population(filename = None, hidden = False)

         PulseSolution.plot_population method.

         Plots populations from result.

         Args:
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.


      .. py:method:: plot_iq(time_index = None, filename = None, hidden = False)

         PulseSolution.plot_iq method.

         Plots IQ points from result.

         Args:
             time_index: Time at which to plot IQ points.
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.


      .. py:method:: plot_iq_trajectory(filename = None, hidden = False)

         PulseSolution.plot_iq_trajectory method.

         Plots trajectory of average IQ points from result.

         Args:
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.


      .. py:method:: plot_trajectory(qubit = 0, filename = None, hidden = False)

         PulseSolution.plot_trajectory method.

         Plots statevector trajectory from result.

         Args:
             qubit: Qubit to plot trajectory of.
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.


      .. py:method:: plot_bloch_trajectory(qubit = 0, filename = None, hidden = False)

         PulseSolution.plot_bloch_trajectory method.

         Plots statevector trajectory on Bloch sphere from result.

         Args:
             qubit: Qubit to plot trajectory of.
             filename: If filename is provided as path str, then figure is saved as png.
             hidden: If False, then plot is not displayed. Useful if method is used for saving only.


      .. py:method:: _xyz(qubit = 0)

         PulseSolution._xyz method.

         Transforms statevectors into 3D trajectory from result.

         Returns:
             XYZ data lists or dict of lists.


      .. py:method:: _trace(state, qubit)

         PulseSolution._trace method.

         Generate partial trace of statevector for specified qubit.

         Args:
             state: System state given as statevector.
             qubit: Qubit to trace out.

         Returns:
             Reduced statevector.



   .. py:method:: solve(circuit, method, initial_state = None, shots = 1024, steps = None, run_options = None)
      :abstractmethod:

      PulseBackend.run.

      Args:
          circuit: Pulse circuit.
          method: ODE solving method to use.
          initial_state: Initial state for simulation,
              either None,
              indicating that the ground state for the system Hamiltonian should be used,
              or an arbitrary Statevector or DensityMatrix.
          shots: Number of shots per experiment. Defaults to 1024.
          steps: Number of steps at which to solve the system.
              Used to automatically calculate an evenly-spaced t_eval range.
          run_options: Options specific to native backend's run method.


   .. py:method:: _get_native_backend()
      :abstractmethod:

      PulseBackend._get_native_backend.



