:py:mod:`casq.backends.pulse_backend`
=====================================

.. py:module:: casq.backends.pulse_backend

.. autoapi-nested-parse::

   Pulse simulator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   casq.backends.pulse_backend.PulseBackend




.. py:class:: PulseBackend(native_backend_type: PulseBackend, model: casq.models.pulse_backend_model.PulseBackendModel, seed: Optional[int] = None)


   PulseBackend class.

   .. py:class:: NativeBackendType(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Native backend type.

      .. py:attribute:: C3
         :value: 0

         

      .. py:attribute:: QCTRL
         :value: 1

         

      .. py:attribute:: QISKIT
         :value: 2

         

      .. py:attribute:: QUTIP
         :value: 3

         


   .. py:class:: ODESolverMethod


      Bases: :py:obj:`str`, :py:obj:`enum.Enum`

      Solver methods.

      .. py:attribute:: QISKIT_DYNAMICS_RK4
         :value: 'RK4'

         

      .. py:attribute:: QISKIT_DYNAMICS_JAX_RK4
         :value: 'jax_RK4'

         

      .. py:attribute:: QISKIT_DYNAMICS_JAX_ODEINT
         :value: 'jax_odeint'

         

      .. py:attribute:: SCIPY_BDF
         :value: 'BDF'

         

      .. py:attribute:: SCIPY_DOP853
         :value: 'DOP853'

         

      .. py:attribute:: SCIPY_LSODA
         :value: 'LSODA'

         

      .. py:attribute:: SCIPY_RADAU
         :value: 'Radau'

         

      .. py:attribute:: SCIPY_RK23
         :value: 'RK23'

         

      .. py:attribute:: SCIPY_RK45
         :value: 'RK45'

         


   .. py:method:: run(circuit: casq.gates.pulse_circuit.PulseCircuit, method: PulseBackend, initial_state: Optional[Union[qiskit.quantum_info.DensityMatrix, qiskit.quantum_info.Statevector]] = None, shots: int = 1024, steps: Optional[int] = None) -> casq.backends.pulse_solution.PulseSolution
      :abstractmethod:

      PulseBackend.run.

      Args:
          circuit: Pulse circuit.
          method: ODE solving method to use.
          initial_state: Initial state for simulation,
              either None,
              indicating that the ground state for the system Hamiltonian should be used,
              or an arbitrary Statevector or DensityMatrix.
          shots: Number of shots per experiment. Defaults to 1024.
          steps: Number of steps at which to solve the system.
              Used to automatically calculate an evenly-spaced t_eval range.


   .. py:method:: _get_native_backend() -> Any
      :abstractmethod:

      PulseBackend._get_native_backend.



