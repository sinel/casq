:py:mod:`casq.backends.qiskit.qiskit_pulse_backend`
===================================================

.. py:module:: casq.backends.qiskit.qiskit_pulse_backend

.. autoapi-nested-parse::

   Pulse simulator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   casq.backends.qiskit.qiskit_pulse_backend.QiskitPulseBackend




.. py:class:: QiskitPulseBackend(hamiltonian, control, seed = None)


   Bases: :py:obj:`casq.backends.pulse_backend.PulseBackend`

   QiskitPulseBackend class.

   .. py:method:: from_backend(backend, extracted_qubits = None, rotating_frame = None, in_frame_basis = False, evaluation_mode = None, rwa_cutoff_freq = None, rwa_carrier_freqs = None, seed = None)
      :classmethod:

      Construct a QiskitPulseBackend instance from an existing backend instance.

      Args:
          backend: The ``Backend`` instance to build the :class:`.DynamicsBackend` from.
          extracted_qubits: List of qubits to extract from the Hamiltonian.
          rotating_frame: Rotating frame argument for the internal :class:`.Solver`.
                  Defaults to None, allowing this method to pick a rotating frame.
          in_frame_basis: Whether to represent the model in the basis in which
                          the rotating frame operator is diagonalized.
          evaluation_mode: Evaluation mode to use by solver.
          rwa_cutoff_freq: Rotating wave approximation cutoff frequency.
                          If None, no approximation is made.
          rwa_carrier_freqs: Carrier frequencies to use for rotating wave approximation.
          seed: Seed to use in random sampling. Defaults to None.

      Returns:
          QiskitPulseBackend


   .. py:method:: solve(circuit, method, initial_state = None, shots = 1024, steps = None, run_options = None)

      QiskitPulseBackend.run.


   .. py:method:: _get_native_backend()

      QiskitPulseBackend._get_native_backend.



