:py:mod:`casq.backends.pulse_solution`
======================================

.. py:module:: casq.backends.pulse_solution

.. autoapi-nested-parse::

   Pulse simulator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   casq.backends.pulse_solution.PulseSolution




.. py:class:: PulseSolution(circuit_name: str, qubits: list[int], times: list[float], samples: list[list[int]], counts: list[dict[str, int]], populations: list[dict[str, float]], states: list[Union[qiskit.quantum_info.DensityMatrix, qiskit.quantum_info.Statevector]], iq_data: list[list[tuple[float, float]]], avg_iq_data: list[tuple[float, float]], shots: int = 1024, seed: Optional[int] = None, is_success: bool = True, timestamp: float = datetime.timestamp(datetime.now()))


   PulseSolution class.

   .. py:method:: from_qiskit(result: qiskit.result.models.ExperimentResult) -> PulseSolution
      :classmethod:

      PulseSolution.from_qiskit method.

      Transforms Qiskit result into pulse backend solution.

      Args:
          result: Qiskit experiment result.

      Returns:
          Pulse solution.


   .. py:method:: plot_population(filename: Optional[str] = None, hidden: bool = False) -> matplotlib.figure.Figure

      PulseSolution.plot_population method.

      Plots populations from result.

      Args:
          filename: If filename is provided as path str, then figure is saved as png.
          hidden: If False, then plot is not displayed. Useful if method is used for saving only.

      Returns:
          :py:class:`matplotlib.figure.Figure`


   .. py:method:: plot_iq(time_index: Optional[int] = None, filename: Optional[str] = None, hidden: bool = False) -> matplotlib.figure.Figure

      PulseSolution.plot_iq method.

      Plots IQ points from result.

      Args:
          time_index: Time at which to plot IQ points.
          filename: If filename is provided as path str, then figure is saved as png.
          hidden: If False, then plot is not displayed. Useful if method is used for saving only.

      Returns:
          :py:class:`matplotlib.figure.Figure`


   .. py:method:: plot_iq_trajectory(filename: Optional[str] = None, hidden: bool = False) -> matplotlib.figure.Figure

      PulseSolution.plot_iq_trajectory method.

      Plots trajectory of average IQ points from result.

      Args:
          filename: If filename is provided as path str, then figure is saved as png.
          hidden: If False, then plot is not displayed. Useful if method is used for saving only.

      Returns:
          :py:class:`matplotlib.figure.Figure`


   .. py:method:: plot_trajectory(qubit: int = 0, filename: Optional[str] = None, hidden: bool = False) -> matplotlib.figure.Figure

      PulseSolution.plot_trajectory method.

      Plots statevector trajectory from result.

      Args:
          qubit: Qubit to plot trajectory of.
          filename: If filename is provided as path str, then figure is saved as png.
          hidden: If False, then plot is not displayed. Useful if method is used for saving only.

      Returns:
          :py:class:`matplotlib.figure.Figure`


   .. py:method:: plot_bloch_trajectory(qubit: int = 0, filename: Optional[str] = None, hidden: bool = False) -> matplotlib.figure.Figure

      PulseSolution.plot_bloch_trajectory method.

      Plots statevector trajectory on Bloch sphere from result.

      Args:
          qubit: Qubit to plot trajectory of.
          filename: If filename is provided as path str, then figure is saved as png.
          hidden: If False, then plot is not displayed. Useful if method is used for saving only.

      Returns:
          :py:class:`matplotlib.figure.Figure`


   .. py:method:: _xyz(qubit: int = 0) -> tuple[list[float], list[float], list[float]]

      PulseSolution._xyz method.

      Transforms statevectors into 3D trajectory from result.

      Returns:
          XYZ data lists or dict of lists.


   .. py:method:: _trace(state: qiskit.quantum_info.Statevector, qubit: int) -> qiskit.quantum_info.Statevector

      PulseSolution._trace method.

      Generate partial trace of statevector for specified qubit.

      Args:
          state: System state given as statevector.
          qubit: Qubit to trace out.

      Returns:
          Reduced statevector.



