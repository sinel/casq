:py:mod:`casq.gates.pulse_gate`
===============================

.. py:module:: casq.gates.pulse_gate

.. autoapi-nested-parse::

   Pulse gate.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   casq.gates.pulse_gate.PulseGate




.. py:class:: PulseGate(num_qubits: int, duration: int, amplitude: float, angle: float = 0, limit_amplitude: bool = True, name: Optional[str] = None)


   Bases: :py:obj:`qiskit.circuit.Gate`

   PulseGate class.

   Abstract base class for all pulse gates.
   Note: Currently only single qubit gates are supported.

   Args:
       num_qubits: The number of qubits the gate acts on.
       duration: Pulse length in terms of the sampling period dt.
       name: Optional display name for the pulse gate.

   .. py:method:: pulse(params: dict[str, Any]) -> qiskit.pulse.library.ScalableSymbolicPulse
      :abstractmethod:

      PulseGate.pulse method.

      Builds pulse for pulse gate.

      Returns:
          :py:class:`qiskit.pulse.library.Pulse`


   .. py:method:: to_parameters_dict(parameters: numpy.typing.NDArray) -> dict[str, Any]
      :abstractmethod:

      GaussianSquarePulseGate.to_parameters_dict method.

      Builds parameter dictionary from array of parameter values.

      Args:
          parameters: Array of pulse parameter values in order [sigma, width].

      Returns:
          Dictionary of parameters.


   .. py:method:: schedule(parameters: dict[str, Any], qubit: int) -> qiskit.pulse.Schedule

      PulseGate.schedule method.

      Builds schedule to run pulse gate for testing or solitary optimization.

      Args:
          parameters: Dictionary of pulse parameters that defines the pulse envelope.
          qubit: Qubit to attach gate instruction to.

      Returns:
          :py:class:`qiskit.pulse.Schedule`
          or list of :py:class:`qiskit_dynamics.signals.Signal`



