:py:mod:`casq.gates`
====================

.. py:module:: casq.gates

.. autoapi-nested-parse::

   Collecting casq.gates package imports in one place for convenient access.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   constant_pulse_gate/index.rst
   drag_pulse_gate/index.rst
   gaussian_pulse_gate/index.rst
   gaussian_square_drag_pulse_gate/index.rst
   gaussian_square_pulse_gate/index.rst
   pulse_circuit/index.rst
   pulse_gate/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   casq.gates.ConstantPulseGate
   casq.gates.DragPulseGate
   casq.gates.GaussianPulseGate
   casq.gates.GaussianSquareDragPulseGate
   casq.gates.GaussianSquarePulseGate
   casq.gates.PulseCircuit
   casq.gates.PulseGate




.. py:class:: ConstantPulseGate(duration: int, amplitude: float, angle: float = 0, limit_amplitude: bool = True, name: Optional[str] = None)


   Bases: :py:obj:`casq.gates.pulse_gate.PulseGate`

   ConstantPulseGate class.

   Note: Currently only single qubit gates are supported.

   Args:
       duration: Pulse length in terms of the sampling period dt.
       amplitude: The magnitude of the amplitude of the pulse.
       angle: The angle of the complex amplitude of the pulse. Default value 0.
       limit_amplitude: If ``True``, then limit the amplitude of the waveform to 1.
           The default is ``True`` and the amplitude is constrained to 1.
       name: Optional display name for the pulse gate.

   .. py:method:: pulse(params: Optional[dict[str, Any]] = None) -> qiskit.pulse.library.ScalableSymbolicPulse

      ConstantPulseGate.pulse method.

      Builds pulse for pulse gate.

      Returns:
          :py:class:`qiskit.pulse.library.ScalableSymbolicPulse`


   .. py:method:: to_parameters_dict(parameters: Optional[numpy.typing.NDArray] = None) -> Optional[dict[str, Any]]

      GaussianSquarePulseGate.to_parameters_dict method.

      Builds parameter dictionary from array of parameter values.

      Args:
          parameters: Array of pulse parameter values in order [sigma, width].

      Returns:
          Dictionary of parameters.



.. py:class:: DragPulseGate(duration: int, amplitude: float, angle: Optional[float] = None, limit_amplitude: bool = True, name: Optional[str] = None)


   Bases: :py:obj:`casq.gates.pulse_gate.PulseGate`

   DragPulseGate class.

   Note: Currently only single qubit gates are supported.

   Args:
       duration: Pulse length in terms of the sampling period dt.
       amplitude: The magnitude of the amplitude of the pulse.
       angle: The angle of the complex amplitude of the pulse. Default value 0.
       limit_amplitude: If ``True``, then limit the amplitude of the waveform to 1.
           The default is ``True`` and the amplitude is constrained to 1.
       name: Optional display name for the pulse gate.

   .. py:method:: pulse(parameters: dict[str, float]) -> qiskit.pulse.library.ScalableSymbolicPulse

      DragPulseGate.pulse method.

      Builds pulse for pulse gate.

      Args:
      parameters: Dictionary of pulse parameters that defines the pulse envelope.
          - sigma: A measure of how wide or narrow the Gaussian risefall is,i.e. its standard deviation.
          - beta: The DRAG correction amplitude.

      Returns:
          :py:class:`qiskit.pulse.library.ScalableSymbolicPulse`


   .. py:method:: to_parameters_dict(parameters: numpy.typing.NDArray) -> dict[str, Any]

      GaussianSquarePulseGate.to_parameters_dict method.

      Builds parameter dictionary from array of parameter values.

      Args:
          parameters: Array of pulse parameter values in order [sigma, beta].

      Returns:
          Dictionary of parameters.



.. py:class:: GaussianPulseGate(duration: int, amplitude: float, angle: float = 0, limit_amplitude: bool = True, name: Optional[str] = None)


   Bases: :py:obj:`casq.gates.pulse_gate.PulseGate`

   GaussianPulseGate class.

   Note: Currently only single qubit gates are supported.

   Args:
       duration: Pulse length in terms of the sampling period dt.
       amplitude: The magnitude of the amplitude of the pulse.
       angle: The angle of the complex amplitude of the pulse. Default value 0.
       limit_amplitude: If ``True``, then limit the amplitude of the waveform to 1.
           The default is ``True`` and the amplitude is constrained to 1.
       name: Optional display name for the pulse gate.

   .. py:method:: pulse(parameters: dict[str, float]) -> qiskit.pulse.library.ScalableSymbolicPulse

      GaussianPulseGate.pulse method.

      Builds pulse for pulse gate.

      Args:
      parameters: Dictionary of pulse parameters that defines the pulse envelope.
          - sigma: A measure of how wide or narrow the Gaussian risefall is,i.e. its standard deviation.

      Returns:
          :py:class:`qiskit.pulse.library.ScalableSymbolicPulse`


   .. py:method:: to_parameters_dict(parameters: numpy.typing.NDArray) -> dict[str, Any]

      GaussianSquarePulseGate.to_parameters_dict method.

      Builds parameter dictionary from array of parameter values.

      Args:
          parameters: Array of pulse parameter values in order [sigma, width].

      Returns:
          Dictionary of parameters.



.. py:class:: GaussianSquareDragPulseGate(duration: int, amplitude: float, angle: float = 0, limit_amplitude: bool = True, name: Optional[str] = None)


   Bases: :py:obj:`casq.gates.pulse_gate.PulseGate`

   GaussianSquareDragPulseGate class.

   Note: Currently only single qubit gates are supported.

   Args:
       duration: Pulse length in terms of the sampling period dt.
       amplitude: The magnitude of the amplitude of the pulse.
       angle: The angle of the complex amplitude of the pulse. Default value 0.
       limit_amplitude: If ``True``, then limit the amplitude of the waveform to 1.
           The default is ``True`` and the amplitude is constrained to 1.
       name: Optional display name for the pulse gate.

   .. py:method:: pulse(parameters: dict[str, float]) -> qiskit.pulse.library.ScalableSymbolicPulse

      GaussianSquareDragPulseGate.pulse method.

      Builds pulse for pulse gate.

      Args:
      parameters: Dictionary of pulse parameters that defines the pulse envelope.
          - sigma: A measure of how wide or narrow the Gaussian risefall is,i.e. its standard deviation.
          - width: The duration of the embedded square pulse.
          - beta: The DRAG correction amplitude.

      Returns:
          :py:class:`qiskit.pulse.library.ScalableSymbolicPulse`


   .. py:method:: to_parameters_dict(parameters: numpy.typing.NDArray) -> dict[str, Any]

      GaussianSquarePulseGate.to_parameters_dict method.

      Builds parameter dictionary from array of parameter values.

      Args:
          parameters: Array of pulse parameter values in order [sigma, width, beta].

      Returns:
          Dictionary of parameters.



.. py:class:: GaussianSquarePulseGate(duration: int, amplitude: float, angle: float = 0, limit_amplitude: bool = True, name: Optional[str] = None)


   Bases: :py:obj:`casq.gates.pulse_gate.PulseGate`

   GaussianSquarePulseGate class.

   Note: Currently only single qubit gates are supported.

   Args:
       duration: Pulse length in terms of the sampling period dt.
       amplitude: The magnitude of the amplitude of the pulse.
       angle: The angle of the complex amplitude of the pulse. Default value 0.
       limit_amplitude: If ``True``, then limit the amplitude of the waveform to 1.
           The default is ``True`` and the amplitude is constrained to 1.
       name: Optional display name for the pulse gate.

   .. py:method:: pulse(parameters: dict[str, float]) -> qiskit.pulse.library.ScalableSymbolicPulse

      GaussianSquarePulseGate.pulse method.

      Builds pulse for pulse gate.

      Args:
      parameters: Dictionary of pulse parameters that defines the pulse envelope.
          - sigma: A measure of how wide or narrow the Gaussian risefall is,i.e. its standard deviation.
          - width: The duration of the embedded square pulse.

      Returns:
          :py:class:`qiskit.pulse.library.ScalableSymbolicPulse`


   .. py:method:: to_parameters_dict(parameters: numpy.typing.NDArray) -> dict[str, Any]

      GaussianSquarePulseGate.to_parameters_dict method.

      Builds parameter dictionary from array of parameter values.

      Args:
          parameters: Array of pulse parameter values in order [sigma, width].

      Returns:
          Dictionary of parameters.



.. py:class:: PulseCircuit(*regs: Union[qiskit.circuit.Register, int, list[qiskit.circuit.Bit]], name: Optional[str] = None, global_phase: qiskit.circuit.parameterexpression.ParameterValueType = 0, metadata: Optional[dict] = None)


   Bases: :py:obj:`qiskit.QuantumCircuit`

   PulseCircuit class.

   Extends Qiskit QuantumCircuit class
   with helper methods for adding pulse gates and plotting.

   Args:
       name: Optional user-friendly name for pulse gate.

   .. py:method:: from_pulse_gate(gate: casq.gates.pulse_gate.PulseGate, parameters: dict[str, Any]) -> PulseCircuit
      :staticmethod:

      PulseCircuit.from_pulse_gate method.

      Builds simple circuit for solitary usage or testing of pulse gate.

      Args:
          gate: Pulse gate.
          parameters: Dictionary of pulse parameters that defines the pulse envelope.

      Returns:
          :py:class:`casq.gates.PulseCircuit`


   .. py:method:: pulse_gate(gate: casq.gates.pulse_gate.PulseGate, parameters: dict[str, Any], qubit: int = 0) -> qiskit.circuit.quantumcircuit.InstructionSet

      PulseGate.pulse_gate method.

      Append pulse gate to circuit.

      Args:
          gate: Pulse gate.
          parameters: Dictionary of pulse parameters that defines the pulse envelope.
          qubit: Qubit to attach pulse gate to.

      Returns:
          :py:class:`qiskit.circuit.InstructionSet`



.. py:class:: PulseGate(num_qubits: int, duration: int, amplitude: float, angle: float = 0, limit_amplitude: bool = True, name: Optional[str] = None)


   Bases: :py:obj:`qiskit.circuit.Gate`

   PulseGate class.

   Abstract base class for all pulse gates.
   Note: Currently only single qubit gates are supported.

   Args:
       num_qubits: The number of qubits the gate acts on.
       duration: Pulse length in terms of the sampling period dt.
       amplitude: The magnitude of the amplitude of the pulse.
       angle: The angle of the complex amplitude of the pulse. Default value 0.
       limit_amplitude: If ``True``, then limit the amplitude of the waveform to 1.
           The default is ``True`` and the amplitude is constrained to 1.
       name: Optional display name for the pulse gate.

   .. py:method:: pulse(params: dict[str, Any]) -> qiskit.pulse.library.ScalableSymbolicPulse
      :abstractmethod:

      PulseGate.pulse method.

      Builds pulse for pulse gate.

      Returns:
          :py:class:`qiskit.pulse.library.ScalableSymbolicPulse`


   .. py:method:: to_parameters_dict(parameters: numpy.typing.NDArray) -> dict[str, Any]
      :abstractmethod:

      GaussianSquarePulseGate.to_parameters_dict method.

      Builds parameter dictionary from array of parameter values.

      Args:
          parameters: Array of pulse parameter values in order [sigma, width].

      Returns:
          Dictionary of parameters.


   .. py:method:: schedule(parameters: dict[str, Any], qubit: int) -> qiskit.pulse.Schedule

      PulseGate.schedule method.

      Builds schedule to run pulse gate for testing or solitary optimization.

      Args:
          parameters: Dictionary of pulse parameters that defines the pulse envelope.
          qubit: Qubit to attach gate instruction to.

      Returns:
          :py:class:`qiskit.pulse.Schedule`



